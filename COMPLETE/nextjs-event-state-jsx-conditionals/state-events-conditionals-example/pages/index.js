import { useState } from 'react'

import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'

import Alert from '@mui/material/Alert';
import Button from '@mui/material/Button';
import Container from '@mui/material/Container';
import Grid from '@mui/material/Grid';
import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';
import ListItemText from '@mui/material/ListItemText';
import TextField from '@mui/material/TextField';
import Typography from '@mui/material/Typography';

import SimpleListItem from '../components/SimpleListItem';

import { MOVIE_LIST } from '../utils/movies'

export default function Home() {
  // Try to put state here!
  const [search, setSearch] = useState("")
  const [year, setYear] = useState("")
  const [movies, setMovies] = useState(MOVIE_LIST)
  const [errorMessage, setErrorMessage] = useState("")

  const handleSubmit = (event) => {
    // prevent the default
    event.preventDefault()
    // validate
    let isValid = validate()
    // filter the movies.
    if (isValid) {
      filterMovies()
    } else {
      setMovies([]) // this is going to show no results found.
    }
  }

  const validate = () => {
    // return true if valid
    // false is not valid.
    
    // check for invalid cases.
    if (isNaN(year)) {
      setErrorMessage(`"${year}" is not a valid year`)
      return false
    }

    if (parseInt(year) < 1800) {
      setErrorMessage(`"${year}", movies weren't around.`)
      return false
    }

    if (parseInt(year) > 2200) {
      setErrorMessage(`"${year}" is too far in the future`)
      return false
    }

    // default is going to be valid 
    // if it hits this point in the function.
    setErrorMessage("")
    return true
  
  }

  const filterMovies = () => {
    // make a copy of the original array
    let filteredMovies = [...MOVIE_LIST]

    // check that the search isn't empty
    if (search.trim() !== "") {
      // use my knowledge of filter to filter the array
      filteredMovies = filteredMovies.filter((movie)=> {
        // the movie and the search to lower case.
        let lowerMovie = movie.name.toLowerCase()
        let lowerSearch = search.toLowerCase()

        return lowerMovie.includes(lowerSearch)
      })
    }

    // filter for the year
    if (year.trim() !== "") {
      // knowledge of filter to continously filter the array
      filteredMovies = filteredMovies.filter((movie) => {
        // if the movie year is exactly what is entered
        return movie.year === parseInt(year)
      })
    }

    // setMovies to my new array.
    setMovies(filteredMovies)
  }


  return (
    <div>
      <Head>
        <title>Our Movie App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link
          rel="stylesheet"
          href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
        />
      </Head>

      <main>
        <Container>
          <Typography variant="h2" component="h2" style={{textAlign: "center"}}>
            Movies
          </Typography>
          <form
            onSubmit={handleSubmit}
            style={{width: '100%'}}
          >
            <Grid container spacing={2}>
              <Grid item xs={6}>
                <TextField
                  id="search-field"
                  label="search..."
                  variant="standard"
                  sx={{width: '100%'}}
                  value={search}
                  onChange={(event)=> setSearch(event.target.value)}
                />
              </Grid>
              <Grid item xs={4}>
                <TextField
                  id="year-field"
                  label="year"
                  variant="standard"
                  sx={{width: '100%'}}
                  value={year}
                  onChange={(event)=> setYear(event.target.value)}
                />
              </Grid>
              <Grid item xs={2}>
                <Button
                  type="submit"
                  variant="contained"
                >Filter</Button>
              </Grid>
              <Grid item xs={10}>
                {/* Add the error message here*/}
                { errorMessage !== "" &&
                  <Alert severity="error">
                    {errorMessage}
                  </Alert>
                }
              </Grid>
            </Grid>
          </form>
          <List sx={{width: `100%`}}>
          {/* Add a ternary to display the number of results */}
          { movies.length !== 0 ?
            <SimpleListItem
              text={`Found ${movies.length} result(s)`}
            />
            :
            <SimpleListItem
              text={"No Results Found."}
            />
          }
          { movies.map((movieData, index)=> {
              return <SimpleListItem 
                key={index}
                text={`${movieData.name} (${movieData.year})`}
              />
            })
          }
          </List>
        </Container>
      </main>
    </div>
  )
}
